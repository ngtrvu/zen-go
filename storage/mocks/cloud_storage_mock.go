// Code generated by MockGen. DO NOT EDIT.
// Source: frameworks/storage/go/cloud_storage/cloud_storage.go
//
// Generated by this command:
//
//	mockgen -source=frameworks/storage/go/cloud_storage/cloud_storage.go -destination=frameworks/storage/go/cloud_storage/mocks/cloud_storage_mock.go
//

// Package mock_cloud_storage is a generated GoMock package.
package mock_cloud_storage

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCloudStorageInterface is a mock of CloudStorageInterface interface.
type MockCloudStorageInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCloudStorageInterfaceMockRecorder
	isgomock struct{}
}

// MockCloudStorageInterfaceMockRecorder is the mock recorder for MockCloudStorageInterface.
type MockCloudStorageInterfaceMockRecorder struct {
	mock *MockCloudStorageInterface
}

// NewMockCloudStorageInterface creates a new mock instance.
func NewMockCloudStorageInterface(ctrl *gomock.Controller) *MockCloudStorageInterface {
	mock := &MockCloudStorageInterface{ctrl: ctrl}
	mock.recorder = &MockCloudStorageInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudStorageInterface) EXPECT() *MockCloudStorageInterfaceMockRecorder {
	return m.recorder
}

// CreateFile mocks base method.
func (m *MockCloudStorageInterface) CreateFile(ctx context.Context, bucketName, uploadPath string, file []byte, fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", ctx, bucketName, uploadPath, file, fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockCloudStorageInterfaceMockRecorder) CreateFile(ctx, bucketName, uploadPath, file, fileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockCloudStorageInterface)(nil).CreateFile), ctx, bucketName, uploadPath, file, fileName)
}

// LoadJSON mocks base method.
func (m *MockCloudStorageInterface) LoadJSON(bucketName, filePath string, v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadJSON", bucketName, filePath, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadJSON indicates an expected call of LoadJSON.
func (mr *MockCloudStorageInterfaceMockRecorder) LoadJSON(bucketName, filePath, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadJSON", reflect.TypeOf((*MockCloudStorageInterface)(nil).LoadJSON), bucketName, filePath, v)
}

// LoadJSONL mocks base method.
func (m *MockCloudStorageInterface) LoadJSONL(bucketName, filePath string) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadJSONL", bucketName, filePath)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadJSONL indicates an expected call of LoadJSONL.
func (mr *MockCloudStorageInterfaceMockRecorder) LoadJSONL(bucketName, filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadJSONL", reflect.TypeOf((*MockCloudStorageInterface)(nil).LoadJSONL), bucketName, filePath)
}

// ReadFile mocks base method.
func (m *MockCloudStorageInterface) ReadFile(ctx context.Context, bucketName, uploadPath, fileName string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", ctx, bucketName, uploadPath, fileName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockCloudStorageInterfaceMockRecorder) ReadFile(ctx, bucketName, uploadPath, fileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockCloudStorageInterface)(nil).ReadFile), ctx, bucketName, uploadPath, fileName)
}

// SignedURL mocks base method.
func (m *MockCloudStorageInterface) SignedURL(ctx context.Context, bucketName, uploadPath, fileName string, ttl int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignedURL", ctx, bucketName, uploadPath, fileName, ttl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignedURL indicates an expected call of SignedURL.
func (mr *MockCloudStorageInterfaceMockRecorder) SignedURL(ctx, bucketName, uploadPath, fileName, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignedURL", reflect.TypeOf((*MockCloudStorageInterface)(nil).SignedURL), ctx, bucketName, uploadPath, fileName, ttl)
}
